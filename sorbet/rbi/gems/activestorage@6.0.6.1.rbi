# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `activestorage` gem.
# Please instead update this file by running `bin/tapioca gem activestorage`.

# source://activestorage//lib/active_storage/gem_version.rb#3
module ActiveStorage
  extend ::ActiveSupport::Autoload

  # source://activesupport/6.0.6.1/lib/active_support/core_ext/module/attribute_accessors.rb#64
  def analyzers; end

  # source://activesupport/6.0.6.1/lib/active_support/core_ext/module/attribute_accessors.rb#131
  def analyzers=(obj); end

  # source://activesupport/6.0.6.1/lib/active_support/core_ext/module/attribute_accessors.rb#64
  def binary_content_type; end

  # source://activesupport/6.0.6.1/lib/active_support/core_ext/module/attribute_accessors.rb#131
  def binary_content_type=(obj); end

  # source://activesupport/6.0.6.1/lib/active_support/core_ext/module/attribute_accessors.rb#64
  def content_types_allowed_inline; end

  # source://activesupport/6.0.6.1/lib/active_support/core_ext/module/attribute_accessors.rb#131
  def content_types_allowed_inline=(obj); end

  # source://activesupport/6.0.6.1/lib/active_support/core_ext/module/attribute_accessors.rb#64
  def content_types_to_serve_as_binary; end

  # source://activesupport/6.0.6.1/lib/active_support/core_ext/module/attribute_accessors.rb#131
  def content_types_to_serve_as_binary=(obj); end

  # source://activesupport/6.0.6.1/lib/active_support/core_ext/module/attribute_accessors.rb#64
  def logger; end

  # source://activesupport/6.0.6.1/lib/active_support/core_ext/module/attribute_accessors.rb#131
  def logger=(obj); end

  # source://activesupport/6.0.6.1/lib/active_support/core_ext/module/attribute_accessors.rb#64
  def paths; end

  # source://activesupport/6.0.6.1/lib/active_support/core_ext/module/attribute_accessors.rb#131
  def paths=(obj); end

  # source://activesupport/6.0.6.1/lib/active_support/core_ext/module/attribute_accessors.rb#64
  def previewers; end

  # source://activesupport/6.0.6.1/lib/active_support/core_ext/module/attribute_accessors.rb#131
  def previewers=(obj); end

  # source://activesupport/6.0.6.1/lib/active_support/core_ext/module/attribute_accessors.rb#64
  def queues; end

  # source://activesupport/6.0.6.1/lib/active_support/core_ext/module/attribute_accessors.rb#131
  def queues=(obj); end

  # source://activesupport/6.0.6.1/lib/active_support/core_ext/module/attribute_accessors.rb#64
  def replace_on_assign_to_many; end

  # source://activesupport/6.0.6.1/lib/active_support/core_ext/module/attribute_accessors.rb#131
  def replace_on_assign_to_many=(obj); end

  # source://activesupport/6.0.6.1/lib/active_support/core_ext/module/attribute_accessors.rb#64
  def routes_prefix; end

  # source://activesupport/6.0.6.1/lib/active_support/core_ext/module/attribute_accessors.rb#131
  def routes_prefix=(obj); end

  # source://activesupport/6.0.6.1/lib/active_support/core_ext/module/attribute_accessors.rb#64
  def service_urls_expire_in; end

  # source://activesupport/6.0.6.1/lib/active_support/core_ext/module/attribute_accessors.rb#131
  def service_urls_expire_in=(obj); end

  # source://activesupport/6.0.6.1/lib/active_support/core_ext/module/attribute_accessors.rb#64
  def supported_image_processing_methods; end

  # source://activesupport/6.0.6.1/lib/active_support/core_ext/module/attribute_accessors.rb#131
  def supported_image_processing_methods=(obj); end

  # source://activesupport/6.0.6.1/lib/active_support/core_ext/module/attribute_accessors.rb#64
  def unsupported_image_processing_arguments; end

  # source://activesupport/6.0.6.1/lib/active_support/core_ext/module/attribute_accessors.rb#131
  def unsupported_image_processing_arguments=(obj); end

  # source://activesupport/6.0.6.1/lib/active_support/core_ext/module/attribute_accessors.rb#64
  def variable_content_types; end

  # source://activesupport/6.0.6.1/lib/active_support/core_ext/module/attribute_accessors.rb#131
  def variable_content_types=(obj); end

  # source://activesupport/6.0.6.1/lib/active_support/core_ext/module/attribute_accessors.rb#64
  def variant_processor; end

  # source://activesupport/6.0.6.1/lib/active_support/core_ext/module/attribute_accessors.rb#131
  def variant_processor=(obj); end

  # source://activesupport/6.0.6.1/lib/active_support/core_ext/module/attribute_accessors.rb#64
  def verifier; end

  # source://activesupport/6.0.6.1/lib/active_support/core_ext/module/attribute_accessors.rb#131
  def verifier=(obj); end

  class << self
    # source://activesupport/6.0.6.1/lib/active_support/core_ext/module/attribute_accessors.rb#57
    def analyzers; end

    # source://activesupport/6.0.6.1/lib/active_support/core_ext/module/attribute_accessors.rb#124
    def analyzers=(obj); end

    # source://activesupport/6.0.6.1/lib/active_support/core_ext/module/attribute_accessors.rb#57
    def binary_content_type; end

    # source://activesupport/6.0.6.1/lib/active_support/core_ext/module/attribute_accessors.rb#124
    def binary_content_type=(obj); end

    # source://activesupport/6.0.6.1/lib/active_support/core_ext/module/attribute_accessors.rb#57
    def content_types_allowed_inline; end

    # source://activesupport/6.0.6.1/lib/active_support/core_ext/module/attribute_accessors.rb#124
    def content_types_allowed_inline=(obj); end

    # source://activesupport/6.0.6.1/lib/active_support/core_ext/module/attribute_accessors.rb#57
    def content_types_to_serve_as_binary; end

    # source://activesupport/6.0.6.1/lib/active_support/core_ext/module/attribute_accessors.rb#124
    def content_types_to_serve_as_binary=(obj); end

    # Returns the version of the currently loaded Active Storage as a <tt>Gem::Version</tt>.
    #
    # source://activestorage//lib/active_storage/gem_version.rb#5
    def gem_version; end

    # source://activesupport/6.0.6.1/lib/active_support/core_ext/module/attribute_accessors.rb#57
    def logger; end

    # source://activesupport/6.0.6.1/lib/active_support/core_ext/module/attribute_accessors.rb#124
    def logger=(obj); end

    # source://activesupport/6.0.6.1/lib/active_support/core_ext/module/attribute_accessors.rb#57
    def paths; end

    # source://activesupport/6.0.6.1/lib/active_support/core_ext/module/attribute_accessors.rb#124
    def paths=(obj); end

    # source://activesupport/6.0.6.1/lib/active_support/core_ext/module/attribute_accessors.rb#57
    def previewers; end

    # source://activesupport/6.0.6.1/lib/active_support/core_ext/module/attribute_accessors.rb#124
    def previewers=(obj); end

    # source://activesupport/6.0.6.1/lib/active_support/core_ext/module/attribute_accessors.rb#57
    def queues; end

    # source://activesupport/6.0.6.1/lib/active_support/core_ext/module/attribute_accessors.rb#124
    def queues=(obj); end

    # source://railties/6.0.6.1/lib/rails/engine.rb#403
    def railtie_helpers_paths; end

    # source://railties/6.0.6.1/lib/rails/engine.rb#392
    def railtie_namespace; end

    # source://railties/6.0.6.1/lib/rails/engine.rb#407
    def railtie_routes_url_helpers(include_path_helpers = T.unsafe(nil)); end

    # source://activesupport/6.0.6.1/lib/active_support/core_ext/module/attribute_accessors.rb#57
    def replace_on_assign_to_many; end

    # source://activesupport/6.0.6.1/lib/active_support/core_ext/module/attribute_accessors.rb#124
    def replace_on_assign_to_many=(obj); end

    # source://activesupport/6.0.6.1/lib/active_support/core_ext/module/attribute_accessors.rb#57
    def routes_prefix; end

    # source://activesupport/6.0.6.1/lib/active_support/core_ext/module/attribute_accessors.rb#124
    def routes_prefix=(obj); end

    # source://activesupport/6.0.6.1/lib/active_support/core_ext/module/attribute_accessors.rb#57
    def service_urls_expire_in; end

    # source://activesupport/6.0.6.1/lib/active_support/core_ext/module/attribute_accessors.rb#124
    def service_urls_expire_in=(obj); end

    # source://activesupport/6.0.6.1/lib/active_support/core_ext/module/attribute_accessors.rb#57
    def supported_image_processing_methods; end

    # source://activesupport/6.0.6.1/lib/active_support/core_ext/module/attribute_accessors.rb#124
    def supported_image_processing_methods=(obj); end

    # source://railties/6.0.6.1/lib/rails/engine.rb#395
    def table_name_prefix; end

    # source://activesupport/6.0.6.1/lib/active_support/core_ext/module/attribute_accessors.rb#57
    def unsupported_image_processing_arguments; end

    # source://activesupport/6.0.6.1/lib/active_support/core_ext/module/attribute_accessors.rb#124
    def unsupported_image_processing_arguments=(obj); end

    # source://railties/6.0.6.1/lib/rails/engine.rb#399
    def use_relative_model_naming?; end

    # source://activesupport/6.0.6.1/lib/active_support/core_ext/module/attribute_accessors.rb#57
    def variable_content_types; end

    # source://activesupport/6.0.6.1/lib/active_support/core_ext/module/attribute_accessors.rb#124
    def variable_content_types=(obj); end

    # source://activesupport/6.0.6.1/lib/active_support/core_ext/module/attribute_accessors.rb#57
    def variant_processor; end

    # source://activesupport/6.0.6.1/lib/active_support/core_ext/module/attribute_accessors.rb#124
    def variant_processor=(obj); end

    # source://activesupport/6.0.6.1/lib/active_support/core_ext/module/attribute_accessors.rb#57
    def verifier; end

    # source://activesupport/6.0.6.1/lib/active_support/core_ext/module/attribute_accessors.rb#124
    def verifier=(obj); end

    # Returns the version of the currently loaded ActiveStorage as a <tt>Gem::Version</tt>
    #
    # source://activestorage//lib/active_storage/version.rb#7
    def version; end
  end
end

class ActiveStorage::AnalyzeJob < ::ActiveStorage::BaseJob
  def perform(blob); end

  class << self
    # source://activesupport/6.0.6.1/lib/active_support/core_ext/class/attribute.rb#106
    def queue_name; end

    # source://activesupport/6.0.6.1/lib/active_support/core_ext/class/attribute.rb#106
    def rescue_handlers; end
  end
end

# This is an abstract base class for analyzers, which extract metadata from blobs. See
# ActiveStorage::Analyzer::ImageAnalyzer for an example of a concrete subclass.
#
# source://activestorage//lib/active_storage/analyzer.rb#6
class ActiveStorage::Analyzer
  # @return [Analyzer] a new instance of Analyzer
  #
  # source://activestorage//lib/active_storage/analyzer.rb#15
  def initialize(blob); end

  # Returns the value of attribute blob.
  #
  # source://activestorage//lib/active_storage/analyzer.rb#7
  def blob; end

  # Override this method in a concrete subclass. Have it return a Hash of metadata.
  #
  # @raise [NotImplementedError]
  #
  # source://activestorage//lib/active_storage/analyzer.rb#20
  def metadata; end

  private

  # Downloads the blob to a tempfile on disk. Yields the tempfile.
  #
  # source://activestorage//lib/active_storage/analyzer.rb#26
  def download_blob_to_tempfile(&block); end

  # source://activestorage//lib/active_storage/analyzer.rb#30
  def logger; end

  # source://activestorage//lib/active_storage/analyzer.rb#34
  def tmpdir; end

  class << self
    # Implement this method in a concrete subclass. Have it return true when given a blob from which
    # the analyzer can extract metadata.
    #
    # @return [Boolean]
    #
    # source://activestorage//lib/active_storage/analyzer.rb#11
    def accept?(blob); end
  end
end

# source://activestorage//lib/active_storage/analyzer/image_analyzer.rb#15
class ActiveStorage::Analyzer::ImageAnalyzer < ::ActiveStorage::Analyzer
  # source://activestorage//lib/active_storage/analyzer/image_analyzer.rb#20
  def metadata; end

  private

  # source://activestorage//lib/active_storage/analyzer/image_analyzer.rb#31
  def read_image; end

  # source://activestorage//lib/active_storage/analyzer/image_analyzer.rb#48
  def rotated_image?(image); end

  class << self
    # source://activestorage//lib/active_storage/analyzer/image_analyzer.rb#16
    def accept?(blob); end
  end
end

# source://activestorage//lib/active_storage/analyzer/null_analyzer.rb#4
class ActiveStorage::Analyzer::NullAnalyzer < ::ActiveStorage::Analyzer
  # source://activestorage//lib/active_storage/analyzer/null_analyzer.rb#9
  def metadata; end

  class << self
    # source://activestorage//lib/active_storage/analyzer/null_analyzer.rb#5
    def accept?(blob); end
  end
end

# source://activestorage//lib/active_storage/analyzer/video_analyzer.rb#20
class ActiveStorage::Analyzer::VideoAnalyzer < ::ActiveStorage::Analyzer
  # source://activestorage//lib/active_storage/analyzer/video_analyzer.rb#25
  def metadata; end

  private

  # source://activestorage//lib/active_storage/analyzer/video_analyzer.rb#50
  def angle; end

  # source://activestorage//lib/active_storage/analyzer/video_analyzer.rb#70
  def computed_height; end

  # source://activestorage//lib/active_storage/analyzer/video_analyzer.rb#54
  def display_aspect_ratio; end

  # source://activestorage//lib/active_storage/analyzer/video_analyzer.rb#84
  def display_height_scale; end

  # source://activestorage//lib/active_storage/analyzer/video_analyzer.rb#46
  def duration; end

  # source://activestorage//lib/active_storage/analyzer/video_analyzer.rb#80
  def encoded_height; end

  # source://activestorage//lib/active_storage/analyzer/video_analyzer.rb#76
  def encoded_width; end

  # source://activestorage//lib/active_storage/analyzer/video_analyzer.rb#114
  def ffprobe_path; end

  # source://activestorage//lib/active_storage/analyzer/video_analyzer.rb#38
  def height; end

  # source://activestorage//lib/active_storage/analyzer/video_analyzer.rb#101
  def probe; end

  # source://activestorage//lib/active_storage/analyzer/video_analyzer.rb#105
  def probe_from(file); end

  # source://activestorage//lib/active_storage/analyzer/video_analyzer.rb#66
  def rotated?; end

  # source://activestorage//lib/active_storage/analyzer/video_analyzer.rb#97
  def streams; end

  # source://activestorage//lib/active_storage/analyzer/video_analyzer.rb#89
  def tags; end

  # source://activestorage//lib/active_storage/analyzer/video_analyzer.rb#93
  def video_stream; end

  # source://activestorage//lib/active_storage/analyzer/video_analyzer.rb#30
  def width; end

  class << self
    # source://activestorage//lib/active_storage/analyzer/video_analyzer.rb#21
    def accept?(blob); end
  end
end

# Abstract base class for the concrete ActiveStorage::Attached::One and ActiveStorage::Attached::Many
# classes that both provide proxy access to the blob association for a record.
#
# source://activestorage//lib/active_storage/attached.rb#8
class ActiveStorage::Attached
  # @return [Attached] a new instance of Attached
  #
  # source://activestorage//lib/active_storage/attached.rb#11
  def initialize(name, record); end

  # Returns the value of attribute name.
  #
  # source://activestorage//lib/active_storage/attached.rb#9
  def name; end

  # Returns the value of attribute record.
  #
  # source://activestorage//lib/active_storage/attached.rb#9
  def record; end

  private

  # source://activestorage//lib/active_storage/attached.rb#16
  def change; end
end

# source://activestorage//lib/active_storage/attached/changes.rb#4
module ActiveStorage::Attached::Changes
  extend ::ActiveSupport::Autoload
end

# source://activestorage//lib/active_storage/attached/changes/create_many.rb#4
class ActiveStorage::Attached::Changes::CreateMany
  # source://activestorage//lib/active_storage/attached/changes/create_many.rb#7
  def initialize(name, record, attachables); end

  # source://activestorage//lib/active_storage/attached/changes/create_many.rb#5
  def attachables; end

  # source://activestorage//lib/active_storage/attached/changes/create_many.rb#11
  def attachments; end

  # source://activestorage//lib/active_storage/attached/changes/create_many.rb#15
  def blobs; end

  # source://activestorage//lib/active_storage/attached/changes/create_many.rb#5
  def name; end

  # source://activestorage//lib/active_storage/attached/changes/create_many.rb#5
  def record; end

  # source://activestorage//lib/active_storage/attached/changes/create_many.rb#23
  def save; end

  # source://activestorage//lib/active_storage/attached/changes/create_many.rb#19
  def upload; end

  private

  # source://activestorage//lib/active_storage/attached/changes/create_many.rb#38
  def assign_associated_attachments; end

  # source://activestorage//lib/active_storage/attached/changes/create_many.rb#33
  def build_subchange_from(attachable); end

  # source://activestorage//lib/active_storage/attached/changes/create_many.rb#42
  def reset_associated_blobs; end

  # source://activestorage//lib/active_storage/attached/changes/create_many.rb#29
  def subchanges; end
end

# source://activestorage//lib/active_storage/attached/changes/create_one.rb#7
class ActiveStorage::Attached::Changes::CreateOne
  # source://activestorage//lib/active_storage/attached/changes/create_one.rb#10
  def initialize(name, record, attachable); end

  # source://activestorage//lib/active_storage/attached/changes/create_one.rb#8
  def attachable; end

  # source://activestorage//lib/active_storage/attached/changes/create_one.rb#14
  def attachment; end

  # source://activestorage//lib/active_storage/attached/changes/create_one.rb#18
  def blob; end

  # source://activestorage//lib/active_storage/attached/changes/create_one.rb#8
  def name; end

  # source://activestorage//lib/active_storage/attached/changes/create_one.rb#8
  def record; end

  # source://activestorage//lib/active_storage/attached/changes/create_one.rb#31
  def save; end

  # source://activestorage//lib/active_storage/attached/changes/create_one.rb#22
  def upload; end

  private

  # source://activestorage//lib/active_storage/attached/changes/create_one.rb#47
  def build_attachment; end

  # source://activestorage//lib/active_storage/attached/changes/create_one.rb#41
  def find_attachment; end

  # source://activestorage//lib/active_storage/attached/changes/create_one.rb#37
  def find_or_build_attachment; end

  # source://activestorage//lib/active_storage/attached/changes/create_one.rb#51
  def find_or_build_blob; end
end

# source://activestorage//lib/active_storage/attached/changes/create_one_of_many.rb#4
class ActiveStorage::Attached::Changes::CreateOneOfMany < ::ActiveStorage::Attached::Changes::CreateOne
  private

  # source://activestorage//lib/active_storage/attached/changes/create_one_of_many.rb#6
  def find_attachment; end
end

# source://activestorage//lib/active_storage/attached/changes/delete_many.rb#4
class ActiveStorage::Attached::Changes::DeleteMany
  # source://activestorage//lib/active_storage/attached/changes/delete_many.rb#7
  def initialize(name, record); end

  # source://activestorage//lib/active_storage/attached/changes/delete_many.rb#11
  def attachables; end

  # source://activestorage//lib/active_storage/attached/changes/delete_many.rb#15
  def attachments; end

  # source://activestorage//lib/active_storage/attached/changes/delete_many.rb#19
  def blobs; end

  # source://activestorage//lib/active_storage/attached/changes/delete_many.rb#5
  def name; end

  # source://activestorage//lib/active_storage/attached/changes/delete_many.rb#5
  def record; end

  # source://activestorage//lib/active_storage/attached/changes/delete_many.rb#23
  def save; end
end

# source://activestorage//lib/active_storage/attached/changes/delete_one.rb#4
class ActiveStorage::Attached::Changes::DeleteOne
  # source://activestorage//lib/active_storage/attached/changes/delete_one.rb#7
  def initialize(name, record); end

  # source://activestorage//lib/active_storage/attached/changes/delete_one.rb#11
  def attachment; end

  # source://activestorage//lib/active_storage/attached/changes/delete_one.rb#5
  def name; end

  # source://activestorage//lib/active_storage/attached/changes/delete_one.rb#5
  def record; end

  # source://activestorage//lib/active_storage/attached/changes/delete_one.rb#15
  def save; end
end

# source://activestorage//lib/active_storage/attached/many.rb#5
class ActiveStorage::Attached::Many < ::ActiveStorage::Attached
  # source://activestorage//lib/active_storage/attached/many.rb#30
  def attach(*attachables); end

  # source://activestorage//lib/active_storage/attached/many.rb#45
  def attached?; end

  # source://activestorage//lib/active_storage/attached/many.rb#11
  def attachments; end

  # source://activestorage//lib/active_storage/attached/many.rb#16
  def blobs; end

  # source://activestorage//lib/active_storage/attached/many.rb#50
  def detach; end

  # source://activesupport/6.0.6.1/lib/active_support/core_ext/module/delegation.rb#302
  def method_missing(method, *args, &block); end

  private

  # source://activesupport/6.0.6.1/lib/active_support/core_ext/module/delegation.rb#294
  def respond_to_missing?(name, include_private = T.unsafe(nil)); end
end

# source://activestorage//lib/active_storage/attached/model.rb#5
module ActiveStorage::Attached::Model
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ActiveStorage::Attached::Model::ClassMethods

  # source://activestorage//lib/active_storage/attached/model.rb#141
  def attachment_changes; end

  # source://activestorage//lib/active_storage/attached/model.rb#145
  def changed_for_autosave?; end

  # source://activestorage//lib/active_storage/attached/model.rb#155
  def reload(*_arg0); end

  private

  # source://activestorage//lib/active_storage/attached/model.rb#149
  def initialize_dup(*_arg0); end
end

# source://activestorage//lib/active_storage/attached/model.rb#0
module ActiveStorage::Attached::Model::ClassMethods
  # source://activestorage//lib/active_storage/attached/model.rb#90
  def has_many_attached(name, dependent: T.unsafe(nil)); end

  # source://activestorage//lib/active_storage/attached/model.rb#33
  def has_one_attached(name, dependent: T.unsafe(nil)); end
end

# source://activestorage//lib/active_storage/attached/one.rb#5
class ActiveStorage::Attached::One < ::ActiveStorage::Attached
  # source://activestorage//lib/active_storage/attached/one.rb#30
  def attach(attachable); end

  # source://activestorage//lib/active_storage/attached/one.rb#45
  def attached?; end

  # source://activestorage//lib/active_storage/attached/one.rb#12
  def attachment; end

  # source://activestorage//lib/active_storage/attached/one.rb#16
  def blank?; end

  # source://activestorage//lib/active_storage/attached/one.rb#50
  def detach; end

  # source://activesupport/6.0.6.1/lib/active_support/core_ext/module/delegation.rb#302
  def method_missing(method, *args, &block); end

  # source://activestorage//lib/active_storage/attached/one.rb#59
  def purge; end

  # source://activestorage//lib/active_storage/attached/one.rb#67
  def purge_later; end

  private

  # source://activesupport/6.0.6.1/lib/active_support/core_ext/module/delegation.rb#294
  def respond_to_missing?(name, include_private = T.unsafe(nil)); end

  # source://activestorage//lib/active_storage/attached/one.rb#75
  def write_attachment(attachment); end
end

class ActiveStorage::Attachment < ::ActiveRecord::Base
  include ::ActiveStorage::Attachment::GeneratedAttributeMethods
  include ::ActiveStorage::Attachment::GeneratedAssociationMethods

  # source://activerecord/6.0.6.1/lib/active_record/autosave_association.rb#152
  def autosave_associated_records_for_blob(*args); end

  # source://activerecord/6.0.6.1/lib/active_record/autosave_association.rb#152
  def autosave_associated_records_for_record(*args); end

  # source://activesupport/6.0.6.1/lib/active_support/core_ext/module/delegation.rb#302
  def method_missing(method, *args, &block); end

  def purge; end
  def purge_later; end

  private

  def analyze_blob_later; end
  def dependent; end
  def identify_blob; end
  def purge_dependent_blob_later; end

  # source://activesupport/6.0.6.1/lib/active_support/core_ext/module/delegation.rb#294
  def respond_to_missing?(name, include_private = T.unsafe(nil)); end

  class << self
    # source://activesupport/6.0.6.1/lib/active_support/core_ext/class/attribute.rb#106
    def __callbacks; end

    # source://activesupport/6.0.6.1/lib/active_support/core_ext/class/attribute.rb#106
    def _reflections; end

    # source://activesupport/6.0.6.1/lib/active_support/core_ext/class/attribute.rb#106
    def _validators; end

    # source://activesupport/6.0.6.1/lib/active_support/core_ext/class/attribute.rb#106
    def attribute_type_decorations; end

    # source://activesupport/6.0.6.1/lib/active_support/core_ext/class/attribute.rb#106
    def defined_enums; end
  end
end

module ActiveStorage::Attachment::GeneratedAssociationMethods
  # source://activerecord/6.0.6.1/lib/active_record/associations/builder/association.rb#99
  def blob; end

  # source://activerecord/6.0.6.1/lib/active_record/associations/builder/association.rb#107
  def blob=(value); end

  # source://activerecord/6.0.6.1/lib/active_record/associations/builder/singular_association.rb#28
  def build_blob(*args, &block); end

  # source://activerecord/6.0.6.1/lib/active_record/associations/builder/singular_association.rb#32
  def create_blob(*args, &block); end

  # source://activerecord/6.0.6.1/lib/active_record/associations/builder/singular_association.rb#36
  def create_blob!(*args, &block); end

  # source://activerecord/6.0.6.1/lib/active_record/associations/builder/association.rb#99
  def record; end

  # source://activerecord/6.0.6.1/lib/active_record/associations/builder/association.rb#107
  def record=(value); end

  # source://activerecord/6.0.6.1/lib/active_record/associations/builder/singular_association.rb#19
  def reload_blob; end

  # source://activerecord/6.0.6.1/lib/active_record/associations/builder/singular_association.rb#19
  def reload_record; end
end

module ActiveStorage::Attachment::GeneratedAttributeMethods; end

class ActiveStorage::BaseController < ::ActionController::Base
  include ::ActiveStorage::SetCurrent

  private

  # source://actionview/6.0.6.1/lib/action_view/layouts.rb#324
  def _layout(lookup_context, formats); end

  class << self
    # source://activesupport/6.0.6.1/lib/active_support/core_ext/class/attribute.rb#106
    def __callbacks; end

    # source://activesupport/6.0.6.1/lib/active_support/core_ext/class/attribute.rb#106
    def _helpers; end

    # source://activesupport/6.0.6.1/lib/active_support/core_ext/class/attribute.rb#106
    def middleware_stack; end
  end
end

class ActiveStorage::BaseJob < ::ActiveJob::Base; end

class ActiveStorage::Blob < ::ActiveRecord::Base
  include ::ActiveStorage::Blob::GeneratedAttributeMethods
  include ::ActiveStorage::Blob::GeneratedAssociationMethods
  include ::ActiveStorage::Blob::Analyzable
  include ::ActiveStorage::Blob::Identifiable
  include ::ActiveStorage::Blob::Representable
  include ::ActionText::Attachable
  extend ::ActionText::Attachable::ClassMethods

  # source://activesupport/6.0.6.1/lib/active_support/core_ext/class/attribute.rb#123
  def after_add_for_attachments; end

  # source://activesupport/6.0.6.1/lib/active_support/core_ext/class/attribute.rb#135
  def after_add_for_attachments=(val); end

  # source://activesupport/6.0.6.1/lib/active_support/core_ext/class/attribute.rb#131
  def after_add_for_attachments?; end

  # source://activesupport/6.0.6.1/lib/active_support/core_ext/class/attribute.rb#123
  def after_remove_for_attachments; end

  # source://activesupport/6.0.6.1/lib/active_support/core_ext/class/attribute.rb#135
  def after_remove_for_attachments=(val); end

  # source://activesupport/6.0.6.1/lib/active_support/core_ext/class/attribute.rb#131
  def after_remove_for_attachments?; end

  # source://actiontext/6.0.6.1/lib/action_text/engine.rb#29
  def attachable_plain_text_representation(caption = T.unsafe(nil)); end

  def audio?; end

  # source://activerecord/6.0.6.1/lib/active_record/autosave_association.rb#152
  def autosave_associated_records_for_attachments(*args); end

  # source://activerecord/6.0.6.1/lib/active_record/autosave_association.rb#190
  def autosave_associated_records_for_preview_image_attachment; end

  # source://activerecord/6.0.6.1/lib/active_record/autosave_association.rb#190
  def autosave_associated_records_for_preview_image_blob; end

  # source://activesupport/6.0.6.1/lib/active_support/core_ext/class/attribute.rb#123
  def before_add_for_attachments; end

  # source://activesupport/6.0.6.1/lib/active_support/core_ext/class/attribute.rb#135
  def before_add_for_attachments=(val); end

  # source://activesupport/6.0.6.1/lib/active_support/core_ext/class/attribute.rb#131
  def before_add_for_attachments?; end

  # source://activesupport/6.0.6.1/lib/active_support/core_ext/class/attribute.rb#123
  def before_remove_for_attachments; end

  # source://activesupport/6.0.6.1/lib/active_support/core_ext/class/attribute.rb#135
  def before_remove_for_attachments=(val); end

  # source://activesupport/6.0.6.1/lib/active_support/core_ext/class/attribute.rb#131
  def before_remove_for_attachments?; end

  def delete; end
  def download(&block); end
  def filename; end
  def image?; end
  def key; end
  def open(tmpdir: T.unsafe(nil), &block); end

  # source://actiontext/6.0.6.1/lib/action_text/engine.rb#25
  def previewable_attachable?; end

  def purge; end
  def purge_later; end

  # source://activerecord/6.0.6.1/lib/active_record/secure_token.rb#31
  def regenerate_key; end

  # source://activesupport/6.0.6.1/lib/active_support/core_ext/class/attribute.rb#123
  def service; end

  # source://activesupport/6.0.6.1/lib/active_support/core_ext/class/attribute.rb#135
  def service=(val); end

  # source://activesupport/6.0.6.1/lib/active_support/core_ext/class/attribute.rb#131
  def service?; end

  def service_headers_for_direct_upload; end
  def service_url(expires_in: T.unsafe(nil), disposition: T.unsafe(nil), filename: T.unsafe(nil), **options); end
  def service_url_for_direct_upload(expires_in: T.unsafe(nil)); end
  def signed_id; end
  def text?; end

  # source://actiontext/6.0.6.1/lib/action_text/engine.rb#33
  def to_trix_content_attachment_partial_path; end

  def unfurl(io, identify: T.unsafe(nil)); end
  def upload(io, identify: T.unsafe(nil)); end
  def upload_without_unfurling(io); end

  # source://activerecord/6.0.6.1/lib/active_record/autosave_association.rb#152
  def validate_associated_records_for_attachments(*args); end

  def video?; end

  private

  def allowed_inline?; end
  def compute_checksum_in_chunks(io); end
  def content_type_for_service_url; end
  def extract_content_type(io); end
  def forced_disposition_for_service_url; end
  def forcibly_serve_as_binary?; end
  def service_metadata; end

  class << self
    # source://activesupport/6.0.6.1/lib/active_support/core_ext/class/attribute.rb#106
    def __callbacks; end

    # source://activesupport/6.0.6.1/lib/active_support/core_ext/class/attribute.rb#106
    def _reflections; end

    # source://activesupport/6.0.6.1/lib/active_support/core_ext/class/attribute.rb#106
    def _validators; end

    # source://activesupport/6.0.6.1/lib/active_support/core_ext/class/attribute.rb#106
    def after_add_for_attachments; end

    # source://activesupport/6.0.6.1/lib/active_support/core_ext/class/attribute.rb#105
    def after_add_for_attachments=(val); end

    # source://activesupport/6.0.6.1/lib/active_support/core_ext/class/attribute.rb#100
    def after_add_for_attachments?; end

    # source://activesupport/6.0.6.1/lib/active_support/core_ext/class/attribute.rb#106
    def after_remove_for_attachments; end

    # source://activesupport/6.0.6.1/lib/active_support/core_ext/class/attribute.rb#105
    def after_remove_for_attachments=(val); end

    # source://activesupport/6.0.6.1/lib/active_support/core_ext/class/attribute.rb#100
    def after_remove_for_attachments?; end

    # source://activesupport/6.0.6.1/lib/active_support/core_ext/class/attribute.rb#106
    def attachment_reflections; end

    # source://activesupport/6.0.6.1/lib/active_support/core_ext/class/attribute.rb#106
    def attribute_type_decorations; end

    # source://activesupport/6.0.6.1/lib/active_support/core_ext/class/attribute.rb#106
    def before_add_for_attachments; end

    # source://activesupport/6.0.6.1/lib/active_support/core_ext/class/attribute.rb#105
    def before_add_for_attachments=(val); end

    # source://activesupport/6.0.6.1/lib/active_support/core_ext/class/attribute.rb#100
    def before_add_for_attachments?; end

    # source://activesupport/6.0.6.1/lib/active_support/core_ext/class/attribute.rb#106
    def before_remove_for_attachments; end

    # source://activesupport/6.0.6.1/lib/active_support/core_ext/class/attribute.rb#105
    def before_remove_for_attachments=(val); end

    # source://activesupport/6.0.6.1/lib/active_support/core_ext/class/attribute.rb#100
    def before_remove_for_attachments?; end

    def build_after_unfurling(io:, filename:, content_type: T.unsafe(nil), metadata: T.unsafe(nil), identify: T.unsafe(nil)); end
    def build_after_upload(io:, filename:, content_type: T.unsafe(nil), metadata: T.unsafe(nil), identify: T.unsafe(nil)); end
    def create_after_unfurling!(io:, filename:, content_type: T.unsafe(nil), metadata: T.unsafe(nil), identify: T.unsafe(nil), record: T.unsafe(nil)); end
    def create_after_upload!(io:, filename:, content_type: T.unsafe(nil), metadata: T.unsafe(nil), identify: T.unsafe(nil), record: T.unsafe(nil)); end
    def create_and_upload!(io:, filename:, content_type: T.unsafe(nil), metadata: T.unsafe(nil), identify: T.unsafe(nil), record: T.unsafe(nil)); end
    def create_before_direct_upload!(filename:, byte_size:, checksum:, content_type: T.unsafe(nil), metadata: T.unsafe(nil)); end

    # source://activesupport/6.0.6.1/lib/active_support/core_ext/class/attribute.rb#106
    def defined_enums; end

    def find_signed(id); end
    def generate_unique_secure_token; end

    # source://activesupport/6.0.6.1/lib/active_support/core_ext/class/attribute.rb#97
    def service; end

    # source://activesupport/6.0.6.1/lib/active_support/core_ext/class/attribute.rb#105
    def service=(val); end

    # source://activesupport/6.0.6.1/lib/active_support/core_ext/class/attribute.rb#100
    def service?; end

    # source://activerecord/6.0.6.1/lib/active_record/scoping/named.rb#191
    def unattached(*args); end

    # source://activerecord/6.0.6.1/lib/active_record/scoping/named.rb#191
    def with_attached_preview_image(*args); end
  end
end

module ActiveStorage::Blob::Analyzable
  def analyze; end
  def analyze_later; end
  def analyzed?; end

  private

  def analyzer; end
  def analyzer_class; end
  def extract_metadata_via_analyzer; end
end

module ActiveStorage::Blob::GeneratedAssociationMethods
  # source://activerecord/6.0.6.1/lib/active_record/associations/builder/collection_association.rb#54
  def attachment_ids; end

  # source://activerecord/6.0.6.1/lib/active_record/associations/builder/collection_association.rb#64
  def attachment_ids=(ids); end

  # source://activerecord/6.0.6.1/lib/active_record/associations/builder/association.rb#99
  def attachments; end

  # source://activerecord/6.0.6.1/lib/active_record/associations/builder/association.rb#107
  def attachments=(value); end

  # source://activerecord/6.0.6.1/lib/active_record/associations/builder/singular_association.rb#28
  def build_preview_image_attachment(*args, &block); end

  # source://activerecord/6.0.6.1/lib/active_record/associations/builder/singular_association.rb#32
  def create_preview_image_attachment(*args, &block); end

  # source://activerecord/6.0.6.1/lib/active_record/associations/builder/singular_association.rb#36
  def create_preview_image_attachment!(*args, &block); end

  # source://activestorage//lib/active_storage/attached/model.rb#35
  def preview_image; end

  # source://activestorage//lib/active_storage/attached/model.rb#40
  def preview_image=(attachable); end

  # source://activerecord/6.0.6.1/lib/active_record/associations/builder/association.rb#99
  def preview_image_attachment; end

  # source://activerecord/6.0.6.1/lib/active_record/associations/builder/association.rb#107
  def preview_image_attachment=(value); end

  # source://activerecord/6.0.6.1/lib/active_record/associations/builder/association.rb#99
  def preview_image_blob; end

  # source://activerecord/6.0.6.1/lib/active_record/associations/builder/association.rb#107
  def preview_image_blob=(value); end

  # source://activerecord/6.0.6.1/lib/active_record/associations/builder/singular_association.rb#19
  def reload_preview_image_attachment; end

  # source://activerecord/6.0.6.1/lib/active_record/associations/builder/singular_association.rb#19
  def reload_preview_image_blob; end
end

module ActiveStorage::Blob::GeneratedAttributeMethods; end

module ActiveStorage::Blob::Identifiable
  def identified?; end
  def identify; end

  private

  def download_identifiable_chunk; end
  def identify_content_type; end
  def update_service_metadata; end
end

module ActiveStorage::Blob::Representable
  extend ::ActiveSupport::Concern

  def preview(transformations); end
  def previewable?; end
  def representable?; end
  def representation(transformations); end
  def variable?; end
  def variant(transformations); end
end

class ActiveStorage::BlobsController < ::ActiveStorage::BaseController
  include ::ActiveStorage::SetBlob

  def show; end

  private

  # source://actionview/6.0.6.1/lib/action_view/layouts.rb#324
  def _layout(lookup_context, formats); end

  class << self
    # source://activesupport/6.0.6.1/lib/active_support/core_ext/class/attribute.rb#106
    def __callbacks; end

    # source://activesupport/6.0.6.1/lib/active_support/core_ext/class/attribute.rb#106
    def _helpers; end

    # source://activesupport/6.0.6.1/lib/active_support/core_ext/class/attribute.rb#106
    def middleware_stack; end
  end
end

class ActiveStorage::Current < ::ActiveSupport::CurrentAttributes
  class << self
    # source://activesupport/6.0.6.1/lib/active_support/current_attributes.rb#112
    def host; end

    # source://activesupport/6.0.6.1/lib/active_support/current_attributes.rb#116
    def host=(attribute); end
  end
end

class ActiveStorage::DirectUploadsController < ::ActiveStorage::BaseController
  def create; end

  private

  # source://actionview/6.0.6.1/lib/action_view/layouts.rb#324
  def _layout(lookup_context, formats); end

  def blob_args; end
  def direct_upload_json(blob); end

  class << self
    # source://activesupport/6.0.6.1/lib/active_support/core_ext/class/attribute.rb#106
    def _helpers; end

    # source://activesupport/6.0.6.1/lib/active_support/core_ext/class/attribute.rb#106
    def middleware_stack; end
  end
end

class ActiveStorage::DiskController < ::ActiveStorage::BaseController
  def show; end
  def update; end

  private

  # source://actionview/6.0.6.1/lib/action_view/layouts.rb#324
  def _layout(lookup_context, formats); end

  def acceptable_content?(token); end
  def decode_verified_key; end
  def decode_verified_token; end
  def disk_service; end
  def serve_file(path, content_type:, disposition:); end

  class << self
    # source://activesupport/6.0.6.1/lib/active_support/core_ext/class/attribute.rb#106
    def __callbacks; end

    # source://activesupport/6.0.6.1/lib/active_support/core_ext/class/attribute.rb#106
    def _helpers; end

    # source://activesupport/6.0.6.1/lib/active_support/core_ext/class/attribute.rb#106
    def middleware_stack; end
  end
end

# source://activestorage//lib/active_storage/downloader.rb#4
class ActiveStorage::Downloader
  # @return [Downloader] a new instance of Downloader
  #
  # source://activestorage//lib/active_storage/downloader.rb#7
  def initialize(service); end

  # source://activestorage//lib/active_storage/downloader.rb#11
  def open(key, checksum:, name: T.unsafe(nil), tmpdir: T.unsafe(nil)); end

  # Returns the value of attribute service.
  #
  # source://activestorage//lib/active_storage/downloader.rb#5
  def service; end

  private

  # source://activestorage//lib/active_storage/downloader.rb#30
  def download(key, file); end

  # source://activestorage//lib/active_storage/downloader.rb#20
  def open_tempfile(name, tmpdir = T.unsafe(nil)); end

  # source://activestorage//lib/active_storage/downloader.rb#37
  def verify_integrity_of(file, checksum:); end
end

# source://activestorage//lib/active_storage/engine.rb#20
class ActiveStorage::Engine < ::Rails::Engine; end

# Generic base class for all Active Storage exceptions.
#
# source://activestorage//lib/active_storage/errors.rb#5
class ActiveStorage::Error < ::StandardError; end

# Raised when ActiveStorage::Blob#download is called on a blob where the
# backing file is no longer present in its service.
#
# source://activestorage//lib/active_storage/errors.rb#25
class ActiveStorage::FileNotFoundError < ::ActiveStorage::Error; end

class ActiveStorage::Filename
  include ::Comparable

  def initialize(filename); end

  def <=>(other); end
  def as_json(*_arg0); end
  def base; end
  def extension; end
  def extension_with_delimiter; end
  def extension_without_delimiter; end
  def sanitized; end
  def to_json; end
  def to_s; end

  class << self
    def wrap(filename); end
  end
end

# Raised when uploaded or downloaded data does not match a precomputed checksum.
# Indicates that a network error or a software bug caused data corruption.
#
# source://activestorage//lib/active_storage/errors.rb#21
class ActiveStorage::IntegrityError < ::ActiveStorage::Error; end

# Raised when ActiveStorage::Blob#variant is called on a blob that isn't variable.
# Use ActiveStorage::Blob#variable? to determine whether a blob is variable.
#
# source://activestorage//lib/active_storage/errors.rb#9
class ActiveStorage::InvariableError < ::ActiveStorage::Error; end

# source://activestorage//lib/active_storage/log_subscriber.rb#6
class ActiveStorage::LogSubscriber < ::ActiveSupport::LogSubscriber
  # source://activestorage//lib/active_storage/log_subscriber.rb#35
  def logger; end

  # source://activestorage//lib/active_storage/log_subscriber.rb#19
  def service_delete(event); end

  # source://activestorage//lib/active_storage/log_subscriber.rb#23
  def service_delete_prefixed(event); end

  # source://activestorage//lib/active_storage/log_subscriber.rb#13
  def service_download(event); end

  # source://activestorage//lib/active_storage/log_subscriber.rb#27
  def service_exist(event); end

  # source://activestorage//lib/active_storage/log_subscriber.rb#13
  def service_streaming_download(event); end

  # source://activestorage//lib/active_storage/log_subscriber.rb#7
  def service_upload(event); end

  # source://activestorage//lib/active_storage/log_subscriber.rb#31
  def service_url(event); end

  private

  # source://activestorage//lib/active_storage/log_subscriber.rb#44
  def debug(event, colored_message); end

  # source://activestorage//lib/active_storage/log_subscriber.rb#40
  def info(event, colored_message); end

  # source://activestorage//lib/active_storage/log_subscriber.rb#52
  def key_in(event); end

  # source://activestorage//lib/active_storage/log_subscriber.rb#48
  def log_prefix_for_service(event); end
end

class ActiveStorage::Preview
  def initialize(blob, variation_or_variation_key); end

  def blob; end
  def image; end
  def processed; end
  def service_url(**options); end
  def variation; end

  private

  def previewer; end
  def previewer_class; end
  def process; end
  def processed?; end
  def variant; end
end

class ActiveStorage::Preview::UnprocessedError < ::StandardError; end

# This is an abstract base class for previewers, which generate images from blobs. See
# ActiveStorage::Previewer::MuPDFPreviewer and ActiveStorage::Previewer::VideoPreviewer for
# examples of concrete subclasses.
#
# source://activestorage//lib/active_storage/previewer.rb#7
class ActiveStorage::Previewer
  # @return [Previewer] a new instance of Previewer
  #
  # source://activestorage//lib/active_storage/previewer.rb#16
  def initialize(blob); end

  # Returns the value of attribute blob.
  #
  # source://activestorage//lib/active_storage/previewer.rb#8
  def blob; end

  # Override this method in a concrete subclass. Have it yield an attachable preview image (i.e.
  # anything accepted by ActiveStorage::Attached::One#attach).
  #
  # @raise [NotImplementedError]
  #
  # source://activestorage//lib/active_storage/previewer.rb#22
  def preview; end

  private

  # source://activestorage//lib/active_storage/previewer.rb#70
  def capture(*argv, to:); end

  # Downloads the blob to a tempfile on disk. Yields the tempfile.
  #
  # source://activestorage//lib/active_storage/previewer.rb#28
  def download_blob_to_tempfile(&block); end

  # Executes a system command, capturing its binary output in a tempfile. Yields the tempfile.
  #
  # Use this method to shell out to a system library (e.g. muPDF or FFmpeg) for preview image
  # generation. The resulting tempfile can be used as the +:io+ value in an attachable Hash:
  #
  #   def preview
  #     download_blob_to_tempfile do |input|
  #       draw "my-drawing-command", input.path, "--format", "png", "-" do |output|
  #         yield io: output, filename: "#{blob.filename.base}.png", content_type: "image/png"
  #       end
  #     end
  #   end
  #
  # The output tempfile is opened in the directory returned by #tmpdir.
  #
  # source://activestorage//lib/active_storage/previewer.rb#46
  def draw(*argv); end

  # source://activestorage//lib/active_storage/previewer.rb#66
  def instrument(operation, payload = T.unsafe(nil), &block); end

  # source://activestorage//lib/active_storage/previewer.rb#76
  def logger; end

  # source://activestorage//lib/active_storage/previewer.rb#56
  def open_tempfile; end

  # source://activestorage//lib/active_storage/previewer.rb#80
  def tmpdir; end

  class << self
    # Implement this method in a concrete subclass. Have it return true when given a blob from which
    # the previewer can generate an image.
    #
    # @return [Boolean]
    #
    # source://activestorage//lib/active_storage/previewer.rb#12
    def accept?(blob); end
  end
end

# source://activestorage//lib/active_storage/previewer/mupdf_previewer.rb#4
class ActiveStorage::Previewer::MuPDFPreviewer < ::ActiveStorage::Previewer
  # source://activestorage//lib/active_storage/previewer/mupdf_previewer.rb#23
  def preview; end

  private

  # source://activestorage//lib/active_storage/previewer/mupdf_previewer.rb#32
  def draw_first_page_from(file, &block); end

  class << self
    # source://activestorage//lib/active_storage/previewer/mupdf_previewer.rb#6
    def accept?(blob); end

    # source://activestorage//lib/active_storage/previewer/mupdf_previewer.rb#14
    def mutool_exists?; end

    # source://activestorage//lib/active_storage/previewer/mupdf_previewer.rb#10
    def mutool_path; end
  end
end

# source://activestorage//lib/active_storage/previewer/poppler_pdf_previewer.rb#4
class ActiveStorage::Previewer::PopplerPDFPreviewer < ::ActiveStorage::Previewer
  # source://activestorage//lib/active_storage/previewer/poppler_pdf_previewer.rb#21
  def preview; end

  private

  # source://activestorage//lib/active_storage/previewer/poppler_pdf_previewer.rb#30
  def draw_first_page_from(file, &block); end

  class << self
    # source://activestorage//lib/active_storage/previewer/poppler_pdf_previewer.rb#6
    def accept?(blob); end

    # source://activestorage//lib/active_storage/previewer/poppler_pdf_previewer.rb#14
    def pdftoppm_exists?; end

    # source://activestorage//lib/active_storage/previewer/poppler_pdf_previewer.rb#10
    def pdftoppm_path; end
  end
end

# source://activestorage//lib/active_storage/previewer/video_previewer.rb#4
class ActiveStorage::Previewer::VideoPreviewer < ::ActiveStorage::Previewer
  # source://activestorage//lib/active_storage/previewer/video_previewer.rb#21
  def preview; end

  private

  # source://activestorage//lib/active_storage/previewer/video_previewer.rb#30
  def draw_relevant_frame_from(file, &block); end

  class << self
    # source://activestorage//lib/active_storage/previewer/video_previewer.rb#6
    def accept?(blob); end

    # source://activestorage//lib/active_storage/previewer/video_previewer.rb#10
    def ffmpeg_exists?; end

    # source://activestorage//lib/active_storage/previewer/video_previewer.rb#16
    def ffmpeg_path; end
  end
end

class ActiveStorage::PurgeJob < ::ActiveStorage::BaseJob
  def perform(blob); end

  class << self
    # source://activesupport/6.0.6.1/lib/active_support/core_ext/class/attribute.rb#106
    def queue_name; end

    # source://activesupport/6.0.6.1/lib/active_support/core_ext/class/attribute.rb#106
    def rescue_handlers; end
  end
end

# source://activestorage//lib/active_storage/reflection.rb#4
module ActiveStorage::Reflection; end

# source://activestorage//lib/active_storage/reflection.rb#39
module ActiveStorage::Reflection::ActiveRecordExtensions
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ActiveStorage::Reflection::ActiveRecordExtensions::ClassMethods

  module GeneratedClassMethods
    def attachment_reflections; end
    def attachment_reflections=(value); end
    def attachment_reflections?; end
  end

  module GeneratedInstanceMethods
    def attachment_reflections; end
    def attachment_reflections?; end
  end
end

# source://activestorage//lib/active_storage/reflection.rb#46
module ActiveStorage::Reflection::ActiveRecordExtensions::ClassMethods
  # Returns an array of reflection objects for all the attachments in the
  # class.
  #
  # source://activestorage//lib/active_storage/reflection.rb#49
  def reflect_on_all_attachments; end

  # Returns the reflection object for the named +attachment+.
  #
  #    User.reflect_on_attachment(:avatar)
  #    # => the avatar reflection
  #
  # source://activestorage//lib/active_storage/reflection.rb#58
  def reflect_on_attachment(attachment); end
end

# Holds all the metadata about a has_many_attached attachment as it was
# specified in the Active Record class.
#
# source://activestorage//lib/active_storage/reflection.rb#15
class ActiveStorage::Reflection::HasManyAttachedReflection < ::ActiveRecord::Reflection::MacroReflection
  # source://activestorage//lib/active_storage/reflection.rb#16
  def macro; end
end

# Holds all the metadata about a has_one_attached attachment as it was
# specified in the Active Record class.
#
# source://activestorage//lib/active_storage/reflection.rb#7
class ActiveStorage::Reflection::HasOneAttachedReflection < ::ActiveRecord::Reflection::MacroReflection
  # source://activestorage//lib/active_storage/reflection.rb#8
  def macro; end
end

# source://activestorage//lib/active_storage/reflection.rb#21
module ActiveStorage::Reflection::ReflectionExtension
  # source://activestorage//lib/active_storage/reflection.rb#22
  def add_attachment_reflection(model, name, reflection); end

  private

  # source://activestorage//lib/active_storage/reflection.rb#27
  def reflection_class_for(macro); end
end

class ActiveStorage::RepresentationsController < ::ActiveStorage::BaseController
  include ::ActiveStorage::SetBlob

  def show; end

  private

  # source://actionview/6.0.6.1/lib/action_view/layouts.rb#324
  def _layout(lookup_context, formats); end

  class << self
    # source://activesupport/6.0.6.1/lib/active_support/core_ext/class/attribute.rb#106
    def __callbacks; end

    # source://activesupport/6.0.6.1/lib/active_support/core_ext/class/attribute.rb#106
    def _helpers; end

    # source://activesupport/6.0.6.1/lib/active_support/core_ext/class/attribute.rb#106
    def middleware_stack; end
  end
end

# Abstract class serving as an interface for concrete services.
#
# The available services are:
#
# * +Disk+, to manage attachments saved directly on the hard drive.
# * +GCS+, to manage attachments through Google Cloud Storage.
# * +S3+, to manage attachments through Amazon S3.
# * +AzureStorage+, to manage attachments through Microsoft Azure Storage.
# * +Mirror+, to be able to use several services to manage attachments.
#
# Inside a Rails application, you can set-up your services through the
# generated <tt>config/storage.yml</tt> file and reference one
# of the aforementioned constant under the +service+ key. For example:
#
#   local:
#     service: Disk
#     root: <%= Rails.root.join("storage") %>
#
# You can checkout the service's constructor to know which keys are required.
#
# Then, in your application's configuration, you can specify the service to
# use like this:
#
#   config.active_storage.service = :local
#
# If you are using Active Storage outside of a Ruby on Rails application, you
# can configure the service to use like this:
#
#   ActiveStorage::Blob.service = ActiveStorage::Service.configure(
#     :Disk,
#     root: Pathname("/foo/bar/storage")
#   )
#
# source://activestorage//lib/active_storage/service.rb#41
class ActiveStorage::Service
  extend ::ActiveSupport::Autoload

  # Delete the file at the +key+.
  #
  # @raise [NotImplementedError]
  #
  # source://activestorage//lib/active_storage/service.rb#91
  def delete(key); end

  # Delete files at keys starting with the +prefix+.
  #
  # @raise [NotImplementedError]
  #
  # source://activestorage//lib/active_storage/service.rb#96
  def delete_prefixed(prefix); end

  # Return the content of the file at the +key+.
  #
  # @raise [NotImplementedError]
  #
  # source://activestorage//lib/active_storage/service.rb#77
  def download(key); end

  # Return the partial content in the byte +range+ of the file at the +key+.
  #
  # @raise [NotImplementedError]
  #
  # source://activestorage//lib/active_storage/service.rb#82
  def download_chunk(key, range); end

  # Return +true+ if a file exists at the +key+.
  #
  # @raise [NotImplementedError]
  # @return [Boolean]
  #
  # source://activestorage//lib/active_storage/service.rb#101
  def exist?(key); end

  # Returns a Hash of headers for +url_for_direct_upload+ requests.
  #
  # source://activestorage//lib/active_storage/service.rb#121
  def headers_for_direct_upload(key, filename:, content_type:, content_length:, checksum:); end

  # source://activestorage//lib/active_storage/service.rb#86
  def open(*args, **options, &block); end

  # Update metadata for the file identified by +key+ in the service.
  # Override in subclasses only if the service needs to store specific
  # metadata that has to be updated upon identification.
  #
  # source://activestorage//lib/active_storage/service.rb#73
  def update_metadata(key, **metadata); end

  # Upload the +io+ to the +key+ specified. If a +checksum+ is provided, the service will
  # ensure a match when the upload has completed or raise an ActiveStorage::IntegrityError.
  #
  # @raise [NotImplementedError]
  #
  # source://activestorage//lib/active_storage/service.rb#66
  def upload(key, io, checksum: T.unsafe(nil), **options); end

  # Returns a signed, temporary URL for the file at the +key+. The URL will be valid for the amount
  # of seconds specified in +expires_in+. You must also provide the +disposition+ (+:inline+ or +:attachment+),
  # +filename+, and +content_type+ that you wish the file to be served with on request.
  #
  # @raise [NotImplementedError]
  #
  # source://activestorage//lib/active_storage/service.rb#108
  def url(key, expires_in:, disposition:, filename:, content_type:); end

  # Returns a signed, temporary URL that a direct upload file can be PUT to on the +key+.
  # The URL will be valid for the amount of seconds specified in +expires_in+.
  # You must also provide the +content_type+, +content_length+, and +checksum+ of the file
  # that will be uploaded. All these attributes will be validated by the service upon upload.
  #
  # @raise [NotImplementedError]
  #
  # source://activestorage//lib/active_storage/service.rb#116
  def url_for_direct_upload(key, expires_in:, content_type:, content_length:, checksum:); end

  private

  # source://activestorage//lib/active_storage/service.rb#137
  def content_disposition_with(filename:, type: T.unsafe(nil)); end

  # source://activestorage//lib/active_storage/service.rb#126
  def instrument(operation, payload = T.unsafe(nil), &block); end

  # source://activestorage//lib/active_storage/service.rb#132
  def service_name; end

  class << self
    # Override in subclasses that stitch together multiple services and hence
    # need to build additional services using the configurator.
    #
    # Passes the configurator and all of the service's config as keyword args.
    #
    # See MirrorService for an example.
    #
    # source://activestorage//lib/active_storage/service.rb#59
    def build(configurator:, service: T.unsafe(nil), **service_config); end

    # Configure an Active Storage service by name from a set of configurations,
    # typically loaded from a YAML file. The Active Storage engine uses this
    # to set the global Active Storage service when the app boots.
    #
    # source://activestorage//lib/active_storage/service.rb#49
    def configure(service_name, configurations); end
  end
end

# source://activestorage//lib/active_storage/service/configurator.rb#4
class ActiveStorage::Service::Configurator
  # source://activestorage//lib/active_storage/service/configurator.rb#11
  def initialize(configurations); end

  # source://activestorage//lib/active_storage/service/configurator.rb#15
  def build(service_name); end

  # source://activestorage//lib/active_storage/service/configurator.rb#5
  def configurations; end

  private

  # source://activestorage//lib/active_storage/service/configurator.rb#21
  def config_for(name); end

  # source://activestorage//lib/active_storage/service/configurator.rb#27
  def resolve(class_name); end

  class << self
    # source://activestorage//lib/active_storage/service/configurator.rb#7
    def build(service_name, configurations); end
  end
end

module ActiveStorage::SetBlob
  extend ::ActiveSupport::Concern

  private

  def set_blob; end
end

module ActiveStorage::SetCurrent
  extend ::ActiveSupport::Concern
end

# source://activestorage//lib/active_storage.rb#68
module ActiveStorage::Transformers
  extend ::ActiveSupport::Autoload
end

# A Transformer applies a set of transformations to an image.
#
# The following concrete subclasses are included in Active Storage:
#
# * ActiveStorage::Transformers::ImageProcessingTransformer:
#   backed by ImageProcessing, a common interface for MiniMagick and ruby-vips
#
# * ActiveStorage::Transformers::MiniMagickTransformer:
#   backed by MiniMagick, a wrapper around the ImageMagick CLI
#
# source://activestorage//lib/active_storage/transformers/transformer.rb#14
class ActiveStorage::Transformers::Transformer
  # @return [Transformer] a new instance of Transformer
  #
  # source://activestorage//lib/active_storage/transformers/transformer.rb#17
  def initialize(transformations); end

  # Applies the transformations to the source image in +file+, producing a target image in the
  # specified +format+. Yields an open Tempfile containing the target image. Closes and unlinks
  # the output tempfile after yielding to the given block. Returns the result of the block.
  #
  # source://activestorage//lib/active_storage/transformers/transformer.rb#24
  def transform(file, format:); end

  # Returns the value of attribute transformations.
  #
  # source://activestorage//lib/active_storage/transformers/transformer.rb#15
  def transformations; end

  private

  # Returns an open Tempfile containing a transformed image in the given +format+.
  # All subclasses implement this method.
  #
  # @raise [NotImplementedError]
  #
  # source://activestorage//lib/active_storage/transformers/transformer.rb#37
  def process(file, format:); end
end

# Raised when ActiveStorage::Blob#preview is called on a blob that isn't previewable.
# Use ActiveStorage::Blob#previewable? to determine whether a blob is previewable.
#
# source://activestorage//lib/active_storage/errors.rb#13
class ActiveStorage::UnpreviewableError < ::ActiveStorage::Error; end

# Raised when ActiveStorage::Blob#representation is called on a blob that isn't representable.
# Use ActiveStorage::Blob#representable? to determine whether a blob is representable.
#
# source://activestorage//lib/active_storage/errors.rb#17
class ActiveStorage::UnrepresentableError < ::ActiveStorage::Error; end

# source://activestorage//lib/active_storage/gem_version.rb#9
module ActiveStorage::VERSION; end

# source://activestorage//lib/active_storage/gem_version.rb#10
ActiveStorage::VERSION::MAJOR = T.let(T.unsafe(nil), Integer)

# source://activestorage//lib/active_storage/gem_version.rb#11
ActiveStorage::VERSION::MINOR = T.let(T.unsafe(nil), Integer)

# source://activestorage//lib/active_storage/gem_version.rb#13
ActiveStorage::VERSION::PRE = T.let(T.unsafe(nil), String)

# source://activestorage//lib/active_storage/gem_version.rb#15
ActiveStorage::VERSION::STRING = T.let(T.unsafe(nil), String)

# source://activestorage//lib/active_storage/gem_version.rb#12
ActiveStorage::VERSION::TINY = T.let(T.unsafe(nil), Integer)

class ActiveStorage::Variant
  def initialize(blob, variation_or_variation_key); end

  def blob; end
  def content_type(*_arg0, &_arg1); end
  def filename(*_arg0, &_arg1); end
  def format(*_arg0, &_arg1); end
  def image; end
  def key; end
  def processed; end
  def service(*_arg0, &_arg1); end
  def service_url(expires_in: T.unsafe(nil), disposition: T.unsafe(nil)); end
  def variation; end

  private

  def process; end
  def processed?; end
  def specification; end
  def transform(image, &block); end
  def upload(file); end
end

class ActiveStorage::Variant::Specification < ::OpenStruct; end
ActiveStorage::Variant::WEB_IMAGE_CONTENT_TYPES = T.let(T.unsafe(nil), Array)

class ActiveStorage::Variation
  def initialize(transformations); end

  def key; end
  def transform(file, format: T.unsafe(nil), &block); end
  def transformations; end

  private

  def transformer; end

  class << self
    def decode(key); end
    def encode(transformations); end
    def wrap(variator); end
  end
end
