# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `ruby_dep` gem.
# Please instead update this file by running `bin/tapioca gem ruby_dep`.

# source://ruby_dep//lib/ruby_dep/logger.rb#3
module RubyDep
  class << self
    # source://ruby_dep//lib/ruby_dep/logger.rb#4
    def logger; end

    # source://ruby_dep//lib/ruby_dep/logger.rb#8
    def logger=(new_logger); end

    # source://ruby_dep//lib/ruby_dep/logger.rb#12
    def stderr_logger; end
  end
end

# TODO: not used, but kept for the sake of SemVer
# TODO: remove in next major version
#
# source://ruby_dep//lib/ruby_dep/logger.rb#33
class RubyDep::Logger
  # @return [Logger] a new instance of Logger
  #
  # source://ruby_dep//lib/ruby_dep/logger.rb#34
  def initialize(device, prefix); end

  # source://ruby_dep//lib/ruby_dep/logger.rb#44
  def notice(msg); end

  # source://ruby_dep//lib/ruby_dep/logger.rb#40
  def warning(msg); end
end

# Shamelessly stolen from https://github.com/karafka/null-logger
#
# source://ruby_dep//lib/ruby_dep/logger.rb#19
class RubyDep::NullLogger
  # source://ruby_dep//lib/ruby_dep/logger.rb#26
  def method_missing(method_name, *args, &block); end

  private

  # @return [Boolean]
  #
  # source://ruby_dep//lib/ruby_dep/logger.rb#22
  def respond_to_missing?(method_name, include_private = T.unsafe(nil)); end
end

# source://ruby_dep//lib/ruby_dep/logger.rb#20
RubyDep::NullLogger::LOG_LEVELS = T.let(T.unsafe(nil), Array)

# source://ruby_dep//lib/ruby_dep/warning.rb#5
RubyDep::PROJECT_URL = T.let(T.unsafe(nil), String)

# source://ruby_dep//lib/ruby_dep/ruby_version.rb#3
class RubyDep::RubyVersion
  # @return [RubyVersion] a new instance of RubyVersion
  #
  # source://ruby_dep//lib/ruby_dep/ruby_version.rb#8
  def initialize(ruby_version, engine); end

  # Returns the value of attribute engine.
  #
  # source://ruby_dep//lib/ruby_dep/ruby_version.rb#6
  def engine; end

  # @return [Boolean]
  #
  # source://ruby_dep//lib/ruby_dep/ruby_version.rb#14
  def recognized?; end

  # source://ruby_dep//lib/ruby_dep/ruby_version.rb#18
  def recommended(status); end

  # NOTE: monkey-patched by acceptance tests
  #
  # source://ruby_dep//lib/ruby_dep/ruby_version.rb#4
  def status; end

  # Returns the value of attribute version.
  #
  # source://ruby_dep//lib/ruby_dep/ruby_version.rb#5
  def version; end

  private

  # source://ruby_dep//lib/ruby_dep/ruby_version.rb#49
  def detect_status; end

  # source://ruby_dep//lib/ruby_dep/ruby_version.rb#45
  def info; end
end

# source://ruby_dep//lib/ruby_dep/ruby_version.rb#27
RubyDep::RubyVersion::VERSION_INFO = T.let(T.unsafe(nil), Hash)

# source://ruby_dep//lib/ruby_dep/warning.rb#7
class RubyDep::Warning
  # @return [Warning] a new instance of Warning
  #
  # source://ruby_dep//lib/ruby_dep/warning.rb#28
  def initialize; end

  # source://ruby_dep//lib/ruby_dep/warning.rb#32
  def show_warnings; end

  # source://ruby_dep//lib/ruby_dep/warning.rb#39
  def silence!; end

  private

  # source://ruby_dep//lib/ruby_dep/warning.rb#81
  def buggy_alternatives; end

  # source://ruby_dep//lib/ruby_dep/warning.rb#62
  def recommendation; end

  # source://ruby_dep//lib/ruby_dep/warning.rb#85
  def recommendation_msg; end

  # source://ruby_dep//lib/ruby_dep/warning.rb#77
  def recommended_versions; end

  # source://ruby_dep//lib/ruby_dep/warning.rb#94
  def safer_alternatives_msg; end

  # @return [Boolean]
  #
  # source://ruby_dep//lib/ruby_dep/warning.rb#45
  def silenced?; end

  # source://ruby_dep//lib/ruby_dep/warning.rb#50
  def status; end

  # source://ruby_dep//lib/ruby_dep/warning.rb#68
  def unrecognized_msg; end

  # source://ruby_dep//lib/ruby_dep/warning.rb#54
  def warn_ruby(msg); end
end

# source://ruby_dep//lib/ruby_dep/warning.rb#8
RubyDep::Warning::DISABLING_ENVIRONMENT_VAR = T.let(T.unsafe(nil), String)

# source://ruby_dep//lib/ruby_dep/warning.rb#20
RubyDep::Warning::NOTICE_BUGGY_ALTERNATIVE = T.let(T.unsafe(nil), String)

# source://ruby_dep//lib/ruby_dep/warning.rb#22
RubyDep::Warning::NOTICE_HOW_TO_DISABLE = T.let(T.unsafe(nil), String)

# source://ruby_dep//lib/ruby_dep/warning.rb#25
RubyDep::Warning::NOTICE_OPEN_ISSUE = T.let(T.unsafe(nil), String)

# source://ruby_dep//lib/ruby_dep/warning.rb#17
RubyDep::Warning::NOTICE_RECOMMENDATION = T.let(T.unsafe(nil), String)

# source://ruby_dep//lib/ruby_dep/warning.rb#9
RubyDep::Warning::PREFIX = T.let(T.unsafe(nil), String)

# source://ruby_dep//lib/ruby_dep/warning.rb#11
RubyDep::Warning::WARNING = T.let(T.unsafe(nil), Hash)
